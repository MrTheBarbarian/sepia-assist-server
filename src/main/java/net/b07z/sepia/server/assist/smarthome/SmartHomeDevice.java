package net.b07z.sepia.server.assist.smarthome;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.simple.JSONObject;

import net.b07z.sepia.server.assist.assistant.LANGUAGES;
import net.b07z.sepia.server.assist.parameters.Room;
import net.b07z.sepia.server.assist.parameters.SmartDevice;
import net.b07z.sepia.server.core.tools.Debugger;
import net.b07z.sepia.server.core.tools.JSON;

public class SmartHomeDevice {
	
	private String name;
	private String type; 		//see: net.b07z.sepia.server.assist.parameters.SmartDevice.Types
	private String room;		//see: net.b07z.sepia.server.assist.parameters.Room.Types
	private String state;		//e.g.: ON, OFF, 1-100, etc.
	private String stateMemory;		//state storage for e.g. default values after restart etc.
	private String link;		//e.g. HTTP direct URL to device
	private JSONObject meta;	//space for custom stuff
	
	//global tags used to store SEPIA specific device data in other HUB systems
	public static final String SEPIA_TAG_NAME = "sepia-name";
	public static final String SEPIA_TAG_TYPE = "sepia-type";
	public static final String SEPIA_TAG_ROOM = "sepia-room";
	public static final String SEPIA_TAG_DATA = "sepia-data";
	public static final String SEPIA_TAG_MEM_STATE = "sepia-mem-state";
	
	//device states
	public static final String LIGHT_ON = "ON";
	public static final String LIGHT_OFF = "OFF";
	public static final String LIGHT_INCREASE = "INCREASE";
	public static final String LIGHT_DECREASE = "DECREASE";
	
	//locals
	private static HashMap<String, String> states_de = new HashMap<>();
	private static HashMap<String, String> states_en = new HashMap<>();
	static {
		states_de.put("on", "an");
		states_de.put("off", "aus");
		states_de.put("open", "offen");
		states_de.put("close", "geschlossen");
		states_de.put("unreachable", "nicht erreichbar");
		
		states_en.put("on", "on");
		states_en.put("off", "off");
		states_en.put("open", "open");
		states_en.put("close", "close");
		states_en.put("unreachable", "unreachable");
	}
	/**
	 * Translate state value.
	 * If state is unknown returns original string.
	 * @param state - generalized state 
	 * @param language - ISO language code
	 */
	public static String getStateLocal(String state, String language){
		String localName = "";
		state = state.toLowerCase();
		if (language.equals(LANGUAGES.DE)){
			localName = states_de.get(state);
		}else if (language.equals(LANGUAGES.EN)){
			localName = states_en.get(state);
		}
		if (localName == null){
			if (!state.matches("\\d+")){
				Debugger.println(SmartHomeDevice.class.getSimpleName() + 
					" - getStateLocal() has no '" + language + "' version for '" + state + "'", 3);
			}
			return state;
		}else{
			return localName;
		}
	}
	
	/**
	 * Create new generalized SEPIA smart home device object filled with data obtained by calling specific HUBs etc. 
	 * @param name - device name
	 * @param type - type as seen e.g. in {@link SmartDevice.Types}
	 * @param room - room as seen e.g. in {@link Room.Types}
	 * @param state - e.g. ON, OFF, 1-100, etc.
	 * @param stateMemory - last known active state e.g. for toggle events to restore previously set brightness etc. 
	 * @param link - direct link to device generated by the specific smart home HUB integration
	 * @param meta - any data generated by the specific smart home HUB integration that might be needed in other HUB methods
	 */
	public SmartHomeDevice(String name, String type, String room, String state, String stateMemory, String link, JSONObject meta){
		this.name = name;
		this.type = type;
		this.room = room;
		this.state = state;
		this.stateMemory = stateMemory;
		this.link = link;
		this.meta = meta;
	}
	/**
	 * Create new generalized SEPIA smart home device object to be filled with data obtained by calling specific HUBs etc.
	 */
	public SmartHomeDevice(){}
	
	/**
	 * Device name
	 * @return
	 */
	public String getName() {
		return name;
	}
	/**
	 * Set object variable (no write to HUB!)
	 */
	public void setName(String name) {
		this.name = name;
	}
	
	/**
	 * Device type
	 * @return
	 */
	public String getType() {
		return type;
	}
	/**
	 * Set object variable (no write to HUB!)
	 */
	public void setType(String type) {
		this.type = type;
	}
	
	/**
	 * Device room
	 * @return
	 */
	public String getRoom() {
		return room;
	}
	/**
	 * Set object variable (no write to HUB!)
	 */
	public void setRoom(String room) {
		this.room = room;
	}
	
	/**
	 * Device state
	 * @return
	 */
	public String getState() {
		return state;
	}
	/**
	 * Set object variable (no write to HUB!)
	 */
	public void setState(String state) {
		this.state = state;
	}
	/**
	 * Write state to HUB.
	 * @param hub - HUB to write to
	 * @param newState - state to write
	 * @return success/error
	 */
	public boolean writeState(SmartHomeHub hub, String newState){
		return hub.setDeviceState(this, newState);
	}
	
	/**
	 * Device state memory
	 * @return
	 */
	public String getStateMemory() {
		return stateMemory;
	}
	/**
	 * Set object variable (no write to HUB!)
	 */
	public void setStateMemory(String stateMemory) {
		this.stateMemory = stateMemory;
	}
	/**
	 * Write state memory to HUB.
	 * @param hub - HUB to write to
	 * @param newStateMem - state to write
	 * @return success/error
	 */
	public boolean writeStateMemory(SmartHomeHub hub, String newStateMem){
		return hub.setDeviceStateMemory(this, newStateMem);
	}
	
	/**
	 * Device direct link
	 * @return
	 */
	public String getLink() {
		return link;
	}
	/**
	 * Set object variable (no write to HUB!)
	 */
	public void setLink(String link) {
		this.link = link;
	}
	
	/**
	 * Device custom meta data
	 * @return
	 */
	public JSONObject getMeta() {
		return meta;
	}
	/**
	 * Get certain value of meta data as string.
	 * @param key
	 * @return
	 */
	public String getMetaValueAsString(String key){
		if (meta != null){
			return JSON.getString(meta, key);
		}else{
			return null;
		}
	}
	/**
	 * Set object variable (no write to HUB!)
	 */
	public void setMeta(JSONObject meta) {
		this.meta = meta;
	}
	/**
	 * Set object variable (no write to HUB!)
	 */
	public void setMetaValue(String key, Object value) {
		if (meta == null){
			meta = new JSONObject();
		}
		JSON.put(meta, key, value);
	}
	
	/**
	 * Export device to JSON.
	 * @return
	 */
	public JSONObject getDeviceAsJson(){
		//create common object
		JSONObject newDeviceObject = JSON.make(
				"name", name, 
				"type", type, 
				"room", room, 
				"state", state, 
				"link", link
		);
		JSON.put(newDeviceObject, "state-memory", stateMemory);
		JSON.put(newDeviceObject, "meta", meta);
		return newDeviceObject;
	}
	/**
	 * Import device from JSON obejct.
	 * @param deviceJson
	 */
	public void importJsonDevice(JSONObject deviceJson){
		this.name = JSON.getString(deviceJson, "name");
		this.type = JSON.getString(deviceJson, "type");
		this.room = JSON.getString(deviceJson, "room");
		this.state = JSON.getString(deviceJson, "state");
		this.stateMemory = JSON.getString(deviceJson, "state-memory");
		this.link = JSON.getString(deviceJson, "link");
		this.meta = JSON.getJObject(deviceJson, "meta");
	}
	
	//--------- static helper methods ----------
	
	/**
	 * Get devices from the list that match type and room (optionally).
	 * @param devices - map of devices taken e.g. from getDevices()
	 * @param deviceType - type of device, see {@link SmartDevice.Types}
	 * @param roomType - type of room or empty (not null!), see {@link Room.Types}
	 * @param maxDevices - maximum number of matches (0 or negative for all possible)
	 * @return
	 */
	public static List<SmartHomeDevice> getMatchingDevices(Map<String, SmartHomeDevice> devices, String deviceType, String roomType, int maxDevices){
		List<SmartHomeDevice> matchingDevices = new ArrayList<>();
		//get all devices with right type and optionally room
		int found = 0;
		for (Map.Entry<String, SmartHomeDevice> entry : devices.entrySet()){
			//check type
			SmartHomeDevice data = entry.getValue();
			String thisType = data.getType();
			if (!thisType.equals(deviceType)){
				continue;
			}
			//check room?
			if (!roomType.isEmpty()){
				String thisRoom = data.getRoom();
				if (!thisRoom.equals(roomType)){
					continue;
				}else{
					matchingDevices.add(data);
					found++;
				}
			}else{
				matchingDevices.add(data);
				found++;
			}
			//max results reached?
			if (maxDevices > 0 && found >= maxDevices){
				break;
			}
			//TODO: we should do a device name check too, but this is not taken into account in SmartDevice parameter yet :-( 
			//e.g. "Light 1", "Lamp A" or "Desk-Lamp" ...
			//I suggest to create an additional parameter called SMART_DEVICE_NAME
		}
		return matchingDevices;
	}
}
